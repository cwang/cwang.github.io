<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on Thoughts from Chen Wang</title><link>https://chenwang.org/posts/</link><description>Recent content in Posts on Thoughts from Chen Wang</description><generator>Hugo -- gohugo.io</generator><language>en-gb</language><copyright>&amp;copy; 2012-2022 Chen Wang | built by &lt;a href='https://gohugo.io/'>Hugo&lt;/a> with &lt;a href='https://github.com/natarajmb/charaka-hugo-theme'>Charaka theme&lt;/a></copyright><lastBuildDate>Sat, 30 Jan 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://chenwang.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Lessons Learnt in 10 years of Volcube</title><link>https://chenwang.org/posts/2021-01-volcube-10-years/</link><pubDate>Sat, 30 Jan 2021 00:00:00 +0000</pubDate><guid>https://chenwang.org/posts/2021-01-volcube-10-years/</guid><description>I vividly remember the early summer of 2010, when I started writing code for a stealth-mode startup. There was no name but we used a code name “project volt”. Fast forward 10 years, Volcube, as it later became known, was sold to our joint venture partner of 5 years.
Looking back, I count myself lucky as 90% of the startups fail; We managed to build a leading product in the field from scratch, with a number of customer segments spanning many countries.</description></item><item><title>Opinionated Patterns/Practices in Java Development and Deployment</title><link>https://chenwang.org/posts/2017-03-java-dev-deploy/</link><pubDate>Fri, 10 Mar 2017 00:00:00 +0000</pubDate><guid>https://chenwang.org/posts/2017-03-java-dev-deploy/</guid><description>Caveat Java and JVM have changed a lot since this article was written.
Read with a nostalgic lens.
Development In general Use Java 8 and use it well Use an IDE and use it well Prefer Enum over defined constant/variable Prefer standard/built-in exceptions over custom/user-defined ones Almost always use java.util.concurrent and its subpackages instead of Thread/Runnable Use Interface only when it is absolutely necessary Use Package structure wisely to avoid spaghetti code Master a build tool and stick to it For application developers Choose libraries/frameworks wisely (but still prefer the use of libraries/frameworks over BYO) Write your code so that it can be as framework-agnostic as possible (or if a framework is to be used, embrace it and its dependencies whole-heartedly) Write meaningful tests, i.</description></item><item><title>JSR-223 Java Scripting API - a Real World Use Case: Success and Pitfalls</title><link>https://chenwang.org/posts/2012-09-java-scripting-api/</link><pubDate>Thu, 20 Sep 2012 00:00:00 +0000</pubDate><guid>https://chenwang.org/posts/2012-09-java-scripting-api/</guid><description>Despite the fact that Java 6 is fast approaching EOL, certain newly added features seem to still remain relatively unknown or unused; JSR-223, the Java Scripting API is probably one of those least mentioned in “What’s New in Java 6” type articles. In this article, we will touch on a real-world use case of the new API and its programming model. Hopefully towards the end, the readers can have a better understanding of the feature and form their own opinions about the suitability for use of the API in their own projects.</description></item></channel></rss>